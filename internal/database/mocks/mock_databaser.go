// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baely/officetracker/internal/database (interfaces: Databaser)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_databaser.go -package=mocks github.com/baely/officetracker/internal/database Databaser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/baely/officetracker/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaser is a mock of Databaser interface.
type MockDatabaser struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaserMockRecorder
}

// MockDatabaserMockRecorder is the mock recorder for MockDatabaser.
type MockDatabaserMockRecorder struct {
	mock *MockDatabaser
}

// NewMockDatabaser creates a new mock instance.
func NewMockDatabaser(ctrl *gomock.Controller) *MockDatabaser {
	mock := &MockDatabaser{ctrl: ctrl}
	mock.recorder = &MockDatabaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaser) EXPECT() *MockDatabaserMockRecorder {
	return m.recorder
}

// GetDay mocks base method.
func (m *MockDatabaser) GetDay(arg0, arg1, arg2, arg3 int) (model.DayState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDay", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(model.DayState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDay indicates an expected call of GetDay.
func (mr *MockDatabaserMockRecorder) GetDay(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDay", reflect.TypeOf((*MockDatabaser)(nil).GetDay), arg0, arg1, arg2, arg3)
}

// GetMonth mocks base method.
func (m *MockDatabaser) GetMonth(arg0, arg1, arg2 int) (model.MonthState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonth", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.MonthState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonth indicates an expected call of GetMonth.
func (mr *MockDatabaserMockRecorder) GetMonth(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonth", reflect.TypeOf((*MockDatabaser)(nil).GetMonth), arg0, arg1, arg2)
}

// GetNote mocks base method.
func (m *MockDatabaser) GetNote(arg0, arg1, arg2 int) (model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockDatabaserMockRecorder) GetNote(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockDatabaser)(nil).GetNote), arg0, arg1, arg2)
}

// GetNotes mocks base method.
func (m *MockDatabaser) GetNotes(arg0, arg1 int) (map[int]model.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotes", arg0, arg1)
	ret0, _ := ret[0].(map[int]model.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotes indicates an expected call of GetNotes.
func (mr *MockDatabaserMockRecorder) GetNotes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotes", reflect.TypeOf((*MockDatabaser)(nil).GetNotes), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockDatabaser) GetUser(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabaserMockRecorder) GetUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabaser)(nil).GetUser), arg0)
}

// GetUserByGHID mocks base method.
func (m *MockDatabaser) GetUserByGHID(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByGHID", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByGHID indicates an expected call of GetUserByGHID.
func (mr *MockDatabaserMockRecorder) GetUserByGHID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByGHID", reflect.TypeOf((*MockDatabaser)(nil).GetUserByGHID), arg0)
}

// GetUserBySecret mocks base method.
func (m *MockDatabaser) GetUserBySecret(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySecret", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySecret indicates an expected call of GetUserBySecret.
func (mr *MockDatabaserMockRecorder) GetUserBySecret(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySecret", reflect.TypeOf((*MockDatabaser)(nil).GetUserBySecret), arg0)
}

// GetYear mocks base method.
func (m *MockDatabaser) GetYear(arg0, arg1 int) (model.YearState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYear", arg0, arg1)
	ret0, _ := ret[0].(model.YearState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYear indicates an expected call of GetYear.
func (mr *MockDatabaserMockRecorder) GetYear(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYear", reflect.TypeOf((*MockDatabaser)(nil).GetYear), arg0, arg1)
}

// SaveDay mocks base method.
func (m *MockDatabaser) SaveDay(arg0, arg1, arg2, arg3 int, arg4 model.DayState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDay", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDay indicates an expected call of SaveDay.
func (mr *MockDatabaserMockRecorder) SaveDay(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDay", reflect.TypeOf((*MockDatabaser)(nil).SaveDay), arg0, arg1, arg2, arg3, arg4)
}

// SaveMonth mocks base method.
func (m *MockDatabaser) SaveMonth(arg0, arg1, arg2 int, arg3 model.MonthState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMonth", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMonth indicates an expected call of SaveMonth.
func (mr *MockDatabaserMockRecorder) SaveMonth(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMonth", reflect.TypeOf((*MockDatabaser)(nil).SaveMonth), arg0, arg1, arg2, arg3)
}

// SaveNote mocks base method.
func (m *MockDatabaser) SaveNote(arg0, arg1, arg2 int, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNote", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNote indicates an expected call of SaveNote.
func (mr *MockDatabaserMockRecorder) SaveNote(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNote", reflect.TypeOf((*MockDatabaser)(nil).SaveNote), arg0, arg1, arg2, arg3)
}

// SaveSecret mocks base method.
func (m *MockDatabaser) SaveSecret(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSecret indicates an expected call of SaveSecret.
func (mr *MockDatabaserMockRecorder) SaveSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecret", reflect.TypeOf((*MockDatabaser)(nil).SaveSecret), arg0, arg1)
}

// SaveUserByGHID mocks base method.
func (m *MockDatabaser) SaveUserByGHID(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserByGHID", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUserByGHID indicates an expected call of SaveUserByGHID.
func (mr *MockDatabaserMockRecorder) SaveUserByGHID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserByGHID", reflect.TypeOf((*MockDatabaser)(nil).SaveUserByGHID), arg0)
}
